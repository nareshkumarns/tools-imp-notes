Terraform

-> It is IAAC (Infrastructure As A Code)
-> We we HCL as language
-> Work with most of the Cloud platforms like AWS, GCP, Azure etc
-> Install Terrfaorm
-> Install VS Code

HCL Syntax:

Blocks - 

blocks {

	key= value ( value can be string, number, boolean, list, map )


}

____________________________
Practical Example Script:
____________________________

provider "aws" {
	
	region = "ap-south-1"
	access_key = ""
	secret_key = ""
}

resource "aws_instance" "vm_1" {
	
	ami = "ami-id"
	instance_type = "t2.micro"
	key_name = "devopssession"
	security_groups = ["default"]
	tags = {
		Name = "LinuxVM"
	}
}
________________________
Terraform Commands
_________________________

# terraform init - Downloads the required provider plugins.

# terraform validate - Checks the configuration files for syntax and logical errors.

# terraform fmt - Formats the Terraform configuration files.

# terraform plan - Creates an execution plan to show what changes Terraform will make.

# terraform apply or terraform apply --auto-approve - Applies the planned changes to create/update resources.

Note: --auto-approve skips the interactive approval step.

# terraform destroy --auto-approve - Destroys all resources managed by Terraform without asking for confirmation.

Variables Creation Syntax:
_____________________________________

variable "name" {
    description = "Describe the variable" (Optional)
    type = "data type of the variable" (Optional)
    default  = "variable value"
}



Types of variables in terraform:
_______________________________________

		a) Input Variables

		b) Output Variables

-> Input variables supply values to the terraform script.

	Example : ami, instance_type etc

-> Output variables get the values from terraform script after script execution.

		Example -1 :  create EC2 VM then print ec2-vm public ip

		Example -2 :  create S3 bucket then print bucket details

		Example -3 :  create RDS then print DB endpoint

		Example -4 :  create IAM user then print IAM user info
___________________________________________

Example 2: Input / Output Variables in terraform

variable "ami" {
    description = "Amazon machine image id"
    default  = "ami-0d682f26195e9ec0f"
}

variable "instance_type" {
    description = "Represens EC2 instance type"
    default = "t2.micro"
}

variable "key_name" {
    description = ""
    default = "devops_session_1"
}

provider "aws" {

  region     = "ap-south-1"
  access_key = ""
  secret_key = ""
}



resource "aws_instance" "linux_vm" {

  ami             = "${var.ami}"
  instance_type   = "${var.instance_type}"
  key_name        = "${var.key_name}"
  security_groups = ["default"]
  tags = {
    Name = "LinuxVM"
  }
}

output "ec2_vm_public_ip" {
  value = aws_instance.linux_vm.public_ip
}

output "ec2_private_ip" {
  value = aws_instance.linux_vm.private_ip
}

output "ec2_subnet_id"{
    value = aws_instance.linux_vm.subnet_id
}

output "ec2_complete_info"{
    value = aws_instance.linux_vm
}


example 3: Creating multiple instances in terraform


locals {

  instances_count = 3

  instances_tags = [
    {
      Name = "Dev-Server"
    },
    {
      Name = "QA-Server"
    },
    {
      Name = "UAT-Server"
    }
  ]
}

resource "aws_instance" "test_ec2_vm" {
  count           = locals.instances_count
  ami             = var.ami
  instance_type   = var.instance_type
  key_name        = var.key_name
  security_groups = ["default"]
  tags = locals.instances_tags[count.index]
}

output "instance_ids" {	
	value = aws_instance.test_ec2_vm[*].pubic_ip
}


Modules In Terraform (Project) will help developer organize the code for easy maintability of project
______________________________________________________________________________________________________

Step-1 : Create Project directory

        Ex: tcs

Step-2 : Create "modules" directory inside project directory tcs

        Ex: tcs
                - modules

Step-3 : Create "ec2" and "s3" directories inside (modules) directory

        Ex :   -tcs
                 - modules
                     - ec2
                     - s3

Step-4 : Create terraform scripts inside "ec2" directory

            inputs.tf
            main.tf
            outputs.tf         

Step-5 : Create terraform scripts inside "s3" directory

            inputs.tf
            main.tf
            outputs.tf          


Step-6 : create "provider.tf" file in root module tcs


Step-7 : create "main.tf" file in root module and invoke child modules from root module using the following

module "my_ec2"{
    source = "./modules/ec2"
}

module "my_s3" {
    source = "./modules/s3"
}


Step-8: Create "ouputs.tf" in project root module and access child modules related outputs.

output "test_vm_public_ip"{
    value = module.my_ec2.a1
}

output "test_vm_private_ip" {
    value = module.my_ec2.a2
}

Note: here a1 and a2 are ouput variables declared in ec2 module ouputs.tf file


Project Environments:
_____________________________

# Dev - Used for development purpose (t2.micro)
# QA or Testing or SIT - Used for Testing purpose (t2.micro)
# UAT - Used for acceptance testing (t2.medium)
# Staging or Pilot or Pre Prod - Environment used for pre production testing (t2.large)
# Prod - Live environment for application (t2.xlarge)

Note: 
Non-PROD Env are DEV, SIT, UAT and PILOT

PROD Env  - Production Server
_______________________________________________________________________________________________________
In order to reuse terraform script for multiple enviroment creation we create multiple variables.tf files         

inputs-dev.tf → Development (DEV)
inputs-sit.tf → System Integration Testing (SIT)
inputs-uat.tf → User Acceptance Testing (UAT)
inputs-pilot.tf → Pilot environment
inputs-prod.tf → Production (PROD)

To supply these vaaribale values from required file we will use the commands as mentioned below

# For DEV env
$ terraform apply --var-file=inputs-dev.tf

# For PROD env
$ terraform apply --var-file=inputs-prod.tf

What is the use of workspace in terraform?
___________________________________________________________________________________________________________
In Terraform, workspaces allow you to manage multiple environments (like dev, staging, and prod) using the same Terraform configuration but different state files.
When we use Terraform Workspaces, Terraform maintains a separate state file for each workspace (environment). This allows executing the same script for multiple environments without modifying the code.

Note: 
**terraform apply** creates resources and writes their details to terraform.tfstate
keeps details of actual resources created in the cloud and helps us to avoid duplicate resources creation
.tf file is read automatically
.tfvars we should read this file manually

Workspace commands:
_________________________________________________________________
$ terraform workspace show       # Show the current workspace

$ terraform workspace new dev    # Create a new workspace for 'dev'
$ terraform workspace new qa     # Create a new workspace for 'qa'
$ terraform workspace new uat    # Create a new workspace for 'uat'
$ terraform workspace new prod   # Create a new workspace for 'prod'

$ terraform workspace list       # List all available workspaces

$ terraform workspace select dev # Switch to 'dev' workspace


1. What is terraform taint? (Deprecated)
The terraform taint command was used to mark a resource for forced recreation in the next terraform apply

terraform taint aws_instance.example
terraform apply

2. Replacing terraform taint (New Approach)

For single resource
terraform apply -replace="aws_instance.example"

For multiple resource
terraform apply -replace="aws_instance.example" -replace="aws_s3_bucket.example"

3. What is terraform untaint? (Deprecated)
The terraform untaint command was used to remove the taint from a resource, preventing its recreation.

terraform untaint aws_instance.example

This removed the taint from aws_instance.example.
The resource would not be recreated in the next terraform apply.

4. To manually destroy a resource and recreate it:

terraform destroy -target="aws_instance.example"
terraform apply
